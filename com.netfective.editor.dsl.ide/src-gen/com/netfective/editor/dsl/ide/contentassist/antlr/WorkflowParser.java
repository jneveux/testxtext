/*
 * generated by Xtext 2.9.1
 */
package com.netfective.editor.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.netfective.editor.dsl.ide.contentassist.antlr.internal.InternalWorkflowParser;
import com.netfective.editor.dsl.services.WorkflowGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class WorkflowParser extends AbstractContentAssistParser {

	@Inject
	private WorkflowGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalWorkflowParser createParser() {
		InternalWorkflowParser result = new InternalWorkflowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPropertyAccess().getAlternatives_2(), "rule__Property__Alternatives_2");
					put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
					put(grammarAccess.getActivatedAccess().getAlternatives(), "rule__Activated__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getCartridgesAccess().getGroup(), "rule__Cartridges__Group__0");
					put(grammarAccess.getPropertiesAccess().getGroup(), "rule__Properties__Group__0");
					put(grammarAccess.getResourcesAccess().getGroup(), "rule__Resources__Group__0");
					put(grammarAccess.getResourceAccess().getGroup(), "rule__Resource__Group__0");
					put(grammarAccess.getPropertyCartridgeAccess().getGroup(), "rule__PropertyCartridge__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getCartridgeAccess().getGroup(), "rule__Cartridge__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getWFBspAssignment_0(), "rule__Model__WFBspAssignment_0");
					put(grammarAccess.getModelAccess().getWFPropertyAssignment_1(), "rule__Model__WFPropertyAssignment_1");
					put(grammarAccess.getModelAccess().getWFResourceAssignment_2(), "rule__Model__WFResourceAssignment_2");
					put(grammarAccess.getCartridgesAccess().getNameAssignment_0(), "rule__Cartridges__NameAssignment_0");
					put(grammarAccess.getCartridgesAccess().getCartdrigesAssignment_2(), "rule__Cartridges__CartdrigesAssignment_2");
					put(grammarAccess.getPropertiesAccess().getNameAssignment_0(), "rule__Properties__NameAssignment_0");
					put(grammarAccess.getPropertiesAccess().getPropertiesAssignment_2(), "rule__Properties__PropertiesAssignment_2");
					put(grammarAccess.getResourcesAccess().getNameAssignment_0(), "rule__Resources__NameAssignment_0");
					put(grammarAccess.getResourcesAccess().getResourcesAssignment_2(), "rule__Resources__ResourcesAssignment_2");
					put(grammarAccess.getResourceAccess().getNameAssignment_0(), "rule__Resource__NameAssignment_0");
					put(grammarAccess.getResourceAccess().getPropertiesAssignment_2(), "rule__Resource__PropertiesAssignment_2");
					put(grammarAccess.getPropertyCartridgeAccess().getCartridgeAssignment_0(), "rule__PropertyCartridge__CartridgeAssignment_0");
					put(grammarAccess.getPropertyCartridgeAccess().getPropertiesAssignment_2(), "rule__PropertyCartridge__PropertiesAssignment_2");
					put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
					put(grammarAccess.getCartridgeAccess().getCartridgeAssignment_0(), "rule__Cartridge__CartridgeAssignment_0");
					put(grammarAccess.getCartridgeAccess().getActivatedAssignment_2(), "rule__Cartridge__ActivatedAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalWorkflowParser typedParser = (InternalWorkflowParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WorkflowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WorkflowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
