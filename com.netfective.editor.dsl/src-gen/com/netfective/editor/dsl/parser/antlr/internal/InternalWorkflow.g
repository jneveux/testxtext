/*
 * generated by Xtext 2.9.1
 */
grammar InternalWorkflow;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.netfective.editor.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.netfective.editor.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.netfective.editor.dsl.services.WorkflowGrammarAccess;

}

@parser::members {

 	private WorkflowGrammarAccess grammarAccess;

    public InternalWorkflowParser(TokenStream input, WorkflowGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected WorkflowGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getWFBspCartridgesParserRuleCall_0_0());
				}
				lv_WFBsp_0_0=ruleCartridges
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"WFBsp",
						lv_WFBsp_0_0,
						"com.netfective.editor.dsl.Workflow.Cartridges");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getWFPropertyPropertiesParserRuleCall_1_0());
				}
				lv_WFProperty_1_0=ruleProperties
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"WFProperty",
						lv_WFProperty_1_0,
						"com.netfective.editor.dsl.Workflow.Properties");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getWFResourceResourcesParserRuleCall_2_0());
				}
				lv_WFResource_2_0=ruleResources
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"WFResource",
						lv_WFResource_2_0,
						"com.netfective.editor.dsl.Workflow.Resources");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCartridges
entryRuleCartridges returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCartridgesRule()); }
	iv_ruleCartridges=ruleCartridges
	{ $current=$iv_ruleCartridges.current; }
	EOF;

// Rule Cartridges
ruleCartridges returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Cartridges'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCartridgesAccess().getNameCartridgesKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCartridgesRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Cartridges");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCartridgesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCartridgesAccess().getCartdrigesCartridgeParserRuleCall_2_0());
				}
				lv_cartdriges_2_0=ruleCartridge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCartridgesRule());
					}
					add(
						$current,
						"cartdriges",
						lv_cartdriges_2_0,
						"com.netfective.editor.dsl.Workflow.Cartridge");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getCartridgesAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleProperties
entryRuleProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertiesRule()); }
	iv_ruleProperties=ruleProperties
	{ $current=$iv_ruleProperties.current; }
	EOF;

// Rule Properties
ruleProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Properties'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPropertiesAccess().getNamePropertiesKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertiesRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Properties");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPropertiesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertiesAccess().getPropertiesPropertyCartridgeParserRuleCall_2_0());
				}
				lv_properties_2_0=rulePropertyCartridge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertiesRule());
					}
					add(
						$current,
						"properties",
						lv_properties_2_0,
						"com.netfective.editor.dsl.Workflow.PropertyCartridge");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getPropertiesAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleResources
entryRuleResources returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourcesRule()); }
	iv_ruleResources=ruleResources
	{ $current=$iv_ruleResources.current; }
	EOF;

// Rule Resources
ruleResources returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Resources'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getResourcesAccess().getNameResourcesKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourcesRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Resources");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getResourcesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getResourcesAccess().getResourcesResourceParserRuleCall_2_0());
				}
				lv_resources_2_0=ruleResource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResourcesRule());
					}
					add(
						$current,
						"resources",
						lv_resources_2_0,
						"com.netfective.editor.dsl.Workflow.Resource");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getResourcesAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	iv_ruleResource=ruleResource
	{ $current=$iv_ruleResource.current; }
	EOF;

// Rule Resource
ruleResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getResourceAccess().getNameQualifiedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResourceRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"com.netfective.editor.dsl.Workflow.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getResourceAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getResourceAccess().getPropertiesPropertyParserRuleCall_2_0());
				}
				lv_properties_2_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResourceRule());
					}
					add(
						$current,
						"properties",
						lv_properties_2_0,
						"com.netfective.editor.dsl.Workflow.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getResourceAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulePropertyCartridge
entryRulePropertyCartridge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyCartridgeRule()); }
	iv_rulePropertyCartridge=rulePropertyCartridge
	{ $current=$iv_rulePropertyCartridge.current; }
	EOF;

// Rule PropertyCartridge
rulePropertyCartridge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyCartridgeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getPropertyCartridgeAccess().getCartridgeCartridgeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPropertyCartridgeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyCartridgeAccess().getPropertiesPropertyParserRuleCall_2_0());
				}
				lv_properties_2_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyCartridgeRule());
					}
					add(
						$current,
						"properties",
						lv_properties_2_0,
						"com.netfective.editor.dsl.Workflow.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getPropertyCartridgeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getEqualsSignKeyword_1());
		}
		(
			this_STRING_2=RULE_STRING
			{
				newLeafNode(this_STRING_2, grammarAccess.getPropertyAccess().getSTRINGTerminalRuleCall_2_0());
			}
			    |
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getPropertyAccess().getINTTerminalRuleCall_2_1());
			}
			    |
			{
				newCompositeNode(grammarAccess.getPropertyAccess().getBOOLEANParserRuleCall_2_2());
			}
			ruleBOOLEAN
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current.getText(); }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleCartridge
entryRuleCartridge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCartridgeRule()); }
	iv_ruleCartridge=ruleCartridge
	{ $current=$iv_ruleCartridge.current; }
	EOF;

// Rule Cartridge
ruleCartridge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCartridgeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getCartridgeAccess().getCartridgeCartridgeWFLCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCartridgeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCartridgeAccess().getActivatedActivatedEnumRuleCall_2_0());
				}
				lv_activated_2_0=ruleActivated
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCartridgeRule());
					}
					set(
						$current,
						"activated",
						lv_activated_2_0,
						"com.netfective.editor.dsl.Workflow.Activated");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule Activated
ruleActivated returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getActivatedAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActivatedAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getActivatedAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActivatedAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
