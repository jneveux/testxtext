/**
 * generated by Xtext 2.9.1
 */
package com.netfective.editor.dsl.workflow.impl;

import com.netfective.editor.dsl.workflow.Cartridge;
import com.netfective.editor.dsl.workflow.Property;
import com.netfective.editor.dsl.workflow.PropertyCartridge;
import com.netfective.editor.dsl.workflow.WorkflowPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Cartridge</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link com.netfective.editor.dsl.workflow.impl.PropertyCartridgeImpl#getCartridge <em>Cartridge</em>}</li>
 *   <li>{@link com.netfective.editor.dsl.workflow.impl.PropertyCartridgeImpl#getProperties <em>Properties</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class PropertyCartridgeImpl extends MinimalEObjectImpl.Container implements PropertyCartridge
{
  /**
   * The cached value of the '{@link #getCartridge() <em>Cartridge</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCartridge()
   * @generated
   * @ordered
   */
  protected Cartridge cartridge;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<Property> properties;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyCartridgeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.PROPERTY_CARTRIDGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cartridge getCartridge()
  {
    if (cartridge != null && cartridge.eIsProxy())
    {
      InternalEObject oldCartridge = (InternalEObject)cartridge;
      cartridge = (Cartridge)eResolveProxy(oldCartridge);
      if (cartridge != oldCartridge)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowPackage.PROPERTY_CARTRIDGE__CARTRIDGE, oldCartridge, cartridge));
      }
    }
    return cartridge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cartridge basicGetCartridge()
  {
    return cartridge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCartridge(Cartridge newCartridge)
  {
    Cartridge oldCartridge = cartridge;
    cartridge = newCartridge;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.PROPERTY_CARTRIDGE__CARTRIDGE, oldCartridge, cartridge));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Property> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<Property>(Property.class, this, WorkflowPackage.PROPERTY_CARTRIDGE__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowPackage.PROPERTY_CARTRIDGE__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.PROPERTY_CARTRIDGE__CARTRIDGE:
        if (resolve) return getCartridge();
        return basicGetCartridge();
      case WorkflowPackage.PROPERTY_CARTRIDGE__PROPERTIES:
        return getProperties();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.PROPERTY_CARTRIDGE__CARTRIDGE:
        setCartridge((Cartridge)newValue);
        return;
      case WorkflowPackage.PROPERTY_CARTRIDGE__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends Property>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.PROPERTY_CARTRIDGE__CARTRIDGE:
        setCartridge((Cartridge)null);
        return;
      case WorkflowPackage.PROPERTY_CARTRIDGE__PROPERTIES:
        getProperties().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.PROPERTY_CARTRIDGE__CARTRIDGE:
        return cartridge != null;
      case WorkflowPackage.PROPERTY_CARTRIDGE__PROPERTIES:
        return properties != null && !properties.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PropertyCartridgeImpl
