/**
 * generated by Xtext 2.9.1
 */
package com.netfective.editor.dsl.workflow.impl;

import com.netfective.editor.dsl.workflow.Activated;
import com.netfective.editor.dsl.workflow.Cartridge;
import com.netfective.editor.dsl.workflow.WorkflowPackage;

import com.netfective.workflow.Wfl.CartridgeWFL;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cartridge</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link com.netfective.editor.dsl.workflow.impl.CartridgeImpl#getCartridge <em>Cartridge</em>}</li>
 *   <li>{@link com.netfective.editor.dsl.workflow.impl.CartridgeImpl#getActivated <em>Activated</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class CartridgeImpl extends MinimalEObjectImpl.Container implements Cartridge
{
  /**
   * The cached value of the '{@link #getCartridge() <em>Cartridge</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCartridge()
   * @generated
   * @ordered
   */
  protected CartridgeWFL cartridge;

  /**
   * The default value of the '{@link #getActivated() <em>Activated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivated()
   * @generated
   * @ordered
   */
  protected static final Activated ACTIVATED_EDEFAULT = Activated.TRUE;

  /**
   * The cached value of the '{@link #getActivated() <em>Activated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivated()
   * @generated
   * @ordered
   */
  protected Activated activated = ACTIVATED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CartridgeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowPackage.Literals.CARTRIDGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CartridgeWFL getCartridge()
  {
    if (cartridge != null && cartridge.eIsProxy())
    {
      InternalEObject oldCartridge = (InternalEObject)cartridge;
      cartridge = (CartridgeWFL)eResolveProxy(oldCartridge);
      if (cartridge != oldCartridge)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowPackage.CARTRIDGE__CARTRIDGE, oldCartridge, cartridge));
      }
    }
    return cartridge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CartridgeWFL basicGetCartridge()
  {
    return cartridge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCartridge(CartridgeWFL newCartridge)
  {
    CartridgeWFL oldCartridge = cartridge;
    cartridge = newCartridge;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.CARTRIDGE__CARTRIDGE, oldCartridge, cartridge));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Activated getActivated()
  {
    return activated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setActivated(Activated newActivated)
  {
    Activated oldActivated = activated;
    activated = newActivated == null ? ACTIVATED_EDEFAULT : newActivated;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowPackage.CARTRIDGE__ACTIVATED, oldActivated, activated));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowPackage.CARTRIDGE__CARTRIDGE:
        if (resolve) return getCartridge();
        return basicGetCartridge();
      case WorkflowPackage.CARTRIDGE__ACTIVATED:
        return getActivated();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowPackage.CARTRIDGE__CARTRIDGE:
        setCartridge((CartridgeWFL)newValue);
        return;
      case WorkflowPackage.CARTRIDGE__ACTIVATED:
        setActivated((Activated)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.CARTRIDGE__CARTRIDGE:
        setCartridge((CartridgeWFL)null);
        return;
      case WorkflowPackage.CARTRIDGE__ACTIVATED:
        setActivated(ACTIVATED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowPackage.CARTRIDGE__CARTRIDGE:
        return cartridge != null;
      case WorkflowPackage.CARTRIDGE__ACTIVATED:
        return activated != ACTIVATED_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (activated: ");
    result.append(activated);
    result.append(')');
    return result.toString();
  }

} //CartridgeImpl
