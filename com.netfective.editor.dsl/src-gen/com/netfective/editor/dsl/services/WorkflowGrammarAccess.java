/*
 * generated by Xtext 2.9.1
 */
package com.netfective.editor.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WorkflowGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWFBspAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWFBspCartridgesParserRuleCall_0_0 = (RuleCall)cWFBspAssignment_0.eContents().get(0);
		private final Assignment cWFPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWFPropertyPropertiesParserRuleCall_1_0 = (RuleCall)cWFPropertyAssignment_1.eContents().get(0);
		private final Assignment cWFResourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWFResourceResourcesParserRuleCall_2_0 = (RuleCall)cWFResourceAssignment_2.eContents().get(0);
		
		//Model:
		//	WFBsp=Cartridges
		//	WFProperty=Properties
		//	WFResource=Resources;
		@Override public ParserRule getRule() { return rule; }
		
		//WFBsp=Cartridges WFProperty=Properties WFResource=Resources
		public Group getGroup() { return cGroup; }
		
		//WFBsp=Cartridges
		public Assignment getWFBspAssignment_0() { return cWFBspAssignment_0; }
		
		//Cartridges
		public RuleCall getWFBspCartridgesParserRuleCall_0_0() { return cWFBspCartridgesParserRuleCall_0_0; }
		
		//WFProperty=Properties
		public Assignment getWFPropertyAssignment_1() { return cWFPropertyAssignment_1; }
		
		//Properties
		public RuleCall getWFPropertyPropertiesParserRuleCall_1_0() { return cWFPropertyPropertiesParserRuleCall_1_0; }
		
		//WFResource=Resources
		public Assignment getWFResourceAssignment_2() { return cWFResourceAssignment_2; }
		
		//Resources
		public RuleCall getWFResourceResourcesParserRuleCall_2_0() { return cWFResourceResourcesParserRuleCall_2_0; }
	}
	public class CartridgesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Cartridges");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCartridgesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCartdrigesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCartdrigesCartridgeParserRuleCall_2_0 = (RuleCall)cCartdrigesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cartridges:
		//	name='Cartridges' '{'
		//	cartdriges+=Cartridge*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Cartridges' '{' cartdriges+=Cartridge* '}'
		public Group getGroup() { return cGroup; }
		
		//name='Cartridges'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Cartridges'
		public Keyword getNameCartridgesKeyword_0_0() { return cNameCartridgesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//cartdriges+=Cartridge*
		public Assignment getCartdrigesAssignment_2() { return cCartdrigesAssignment_2; }
		
		//Cartridge
		public RuleCall getCartdrigesCartridgeParserRuleCall_2_0() { return cCartdrigesCartridgeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Properties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePropertiesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyCartridgeParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Properties:
		//	name='Properties' '{'
		//	properties+=PropertyCartridge*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Properties' '{' properties+=PropertyCartridge* '}'
		public Group getGroup() { return cGroup; }
		
		//name='Properties'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Properties'
		public Keyword getNamePropertiesKeyword_0_0() { return cNamePropertiesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//properties+=PropertyCartridge*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }
		
		//PropertyCartridge
		public RuleCall getPropertiesPropertyCartridgeParserRuleCall_2_0() { return cPropertiesPropertyCartridgeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ResourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Resources");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameResourcesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResourcesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResourcesResourceParserRuleCall_2_0 = (RuleCall)cResourcesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Resources:
		//	name='Resources' '{'
		//	resources+=Resource+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Resources' '{' resources+=Resource+ '}'
		public Group getGroup() { return cGroup; }
		
		//name='Resources'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Resources'
		public Keyword getNameResourcesKeyword_0_0() { return cNameResourcesKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//resources+=Resource+
		public Assignment getResourcesAssignment_2() { return cResourcesAssignment_2; }
		
		//Resource
		public RuleCall getResourcesResourceParserRuleCall_2_0() { return cResourcesResourceParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Resource:
		//	name=QualifiedName '{'
		//	properties+=Property
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName '{' properties+=Property '}'
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PropertyCartridgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.PropertyCartridge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCartridgeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCartridgeCartridgeCrossReference_0_0 = (CrossReference)cCartridgeAssignment_0.eContents().get(0);
		private final RuleCall cCartridgeCartridgeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cCartridgeCartridgeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PropertyCartridge:
		//	cartridge=[Cartridge|QualifiedName] '{'
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//cartridge=[Cartridge|QualifiedName] '{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//cartridge=[Cartridge|QualifiedName]
		public Assignment getCartridgeAssignment_0() { return cCartridgeAssignment_0; }
		
		//[Cartridge|QualifiedName]
		public CrossReference getCartridgeCartridgeCrossReference_0_0() { return cCartridgeCartridgeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getCartridgeCartridgeQualifiedNameParserRuleCall_0_0_1() { return cCartridgeCartridgeQualifiedNameParserRuleCall_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cBOOLEANParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//Property:
		//	name=ID '=' (STRING | INT | BOOLEAN);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' (STRING | INT | BOOLEAN)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(STRING | INT | BOOLEAN)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//BOOLEAN
		public RuleCall getBOOLEANParserRuleCall_2_2() { return cBOOLEANParserRuleCall_2_2; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class CartridgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Cartridge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCartridgeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCartridgeCartridgeWFLCrossReference_0_0 = (CrossReference)cCartridgeAssignment_0.eContents().get(0);
		private final RuleCall cCartridgeCartridgeWFLQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cCartridgeCartridgeWFLCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActivatedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActivatedActivatedEnumRuleCall_2_0 = (RuleCall)cActivatedAssignment_2.eContents().get(0);
		
		//Cartridge:
		//	cartridge=[wfl::CartridgeWFL|QualifiedName] ':' activated=Activated;
		@Override public ParserRule getRule() { return rule; }
		
		//cartridge=[wfl::CartridgeWFL|QualifiedName] ':' activated=Activated
		public Group getGroup() { return cGroup; }
		
		//cartridge=[wfl::CartridgeWFL|QualifiedName]
		public Assignment getCartridgeAssignment_0() { return cCartridgeAssignment_0; }
		
		//[wfl::CartridgeWFL|QualifiedName]
		public CrossReference getCartridgeCartridgeWFLCrossReference_0_0() { return cCartridgeCartridgeWFLCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getCartridgeCartridgeWFLQualifiedNameParserRuleCall_0_0_1() { return cCartridgeCartridgeWFLQualifiedNameParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//activated=Activated
		public Assignment getActivatedAssignment_2() { return cActivatedAssignment_2; }
		
		//Activated
		public RuleCall getActivatedActivatedEnumRuleCall_2_0() { return cActivatedActivatedEnumRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class ActivatedElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.netfective.editor.dsl.Workflow.Activated");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Activated:
		//	TRUE='true' | FALSE='false';
		public EnumRule getRule() { return rule; }
		
		//TRUE='true' | FALSE='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE='true'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'true'
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final CartridgesElements pCartridges;
	private final PropertiesElements pProperties;
	private final ResourcesElements pResources;
	private final ResourceElements pResource;
	private final PropertyCartridgeElements pPropertyCartridge;
	private final PropertyElements pProperty;
	private final BOOLEANElements pBOOLEAN;
	private final CartridgeElements pCartridge;
	private final QualifiedNameElements pQualifiedName;
	private final ActivatedElements eActivated;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCartridges = new CartridgesElements();
		this.pProperties = new PropertiesElements();
		this.pResources = new ResourcesElements();
		this.pResource = new ResourceElements();
		this.pPropertyCartridge = new PropertyCartridgeElements();
		this.pProperty = new PropertyElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pCartridge = new CartridgeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.eActivated = new ActivatedElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.netfective.editor.dsl.Workflow".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	WFBsp=Cartridges
	//	WFProperty=Properties
	//	WFResource=Resources;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Cartridges:
	//	name='Cartridges' '{'
	//	cartdriges+=Cartridge*
	//	'}';
	public CartridgesElements getCartridgesAccess() {
		return pCartridges;
	}
	
	public ParserRule getCartridgesRule() {
		return getCartridgesAccess().getRule();
	}
	
	//Properties:
	//	name='Properties' '{'
	//	properties+=PropertyCartridge*
	//	'}';
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}
	
	//Resources:
	//	name='Resources' '{'
	//	resources+=Resource+
	//	'}';
	public ResourcesElements getResourcesAccess() {
		return pResources;
	}
	
	public ParserRule getResourcesRule() {
		return getResourcesAccess().getRule();
	}
	
	//Resource:
	//	name=QualifiedName '{'
	//	properties+=Property
	//	'}';
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//PropertyCartridge:
	//	cartridge=[Cartridge|QualifiedName] '{'
	//	properties+=Property*
	//	'}';
	public PropertyCartridgeElements getPropertyCartridgeAccess() {
		return pPropertyCartridge;
	}
	
	public ParserRule getPropertyCartridgeRule() {
		return getPropertyCartridgeAccess().getRule();
	}
	
	//Property:
	//	name=ID '=' (STRING | INT | BOOLEAN);
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//BOOLEAN ecore::EBoolean:
	//	'true' | 'false'
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//Cartridge:
	//	cartridge=[wfl::CartridgeWFL|QualifiedName] ':' activated=Activated;
	public CartridgeElements getCartridgeAccess() {
		return pCartridge;
	}
	
	public ParserRule getCartridgeRule() {
		return getCartridgeAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//enum Activated:
	//	TRUE='true' | FALSE='false';
	public ActivatedElements getActivatedAccess() {
		return eActivated;
	}
	
	public EnumRule getActivatedRule() {
		return getActivatedAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
