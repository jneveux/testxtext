/*
 * generated by Xtext 2.9.1
 */
package com.netfective.editor.dsl.serializer;

import com.google.inject.Inject;
import com.netfective.editor.dsl.services.WorkflowGrammarAccess;
import com.netfective.editor.dsl.workflow.Cartridge;
import com.netfective.editor.dsl.workflow.Cartridges;
import com.netfective.editor.dsl.workflow.Model;
import com.netfective.editor.dsl.workflow.Properties;
import com.netfective.editor.dsl.workflow.Property;
import com.netfective.editor.dsl.workflow.PropertyCartridge;
import com.netfective.editor.dsl.workflow.Resource;
import com.netfective.editor.dsl.workflow.Resources;
import com.netfective.editor.dsl.workflow.WorkflowPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class WorkflowSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WorkflowGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WorkflowPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WorkflowPackage.CARTRIDGE:
				sequence_Cartridge(context, (Cartridge) semanticObject); 
				return; 
			case WorkflowPackage.CARTRIDGES:
				sequence_Cartridges(context, (Cartridges) semanticObject); 
				return; 
			case WorkflowPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case WorkflowPackage.PROPERTIES:
				sequence_Properties(context, (Properties) semanticObject); 
				return; 
			case WorkflowPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case WorkflowPackage.PROPERTY_CARTRIDGE:
				sequence_PropertyCartridge(context, (PropertyCartridge) semanticObject); 
				return; 
			case WorkflowPackage.RESOURCE:
				sequence_Resource(context, (Resource) semanticObject); 
				return; 
			case WorkflowPackage.RESOURCES:
				sequence_Resources(context, (Resources) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Cartridge returns Cartridge
	 *
	 * Constraint:
	 *     (cartridge=[CartridgeWFL|QualifiedName] activated=Activated)
	 */
	protected void sequence_Cartridge(ISerializationContext context, Cartridge semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowPackage.Literals.CARTRIDGE__CARTRIDGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowPackage.Literals.CARTRIDGE__CARTRIDGE));
			if (transientValues.isValueTransient(semanticObject, WorkflowPackage.Literals.CARTRIDGE__ACTIVATED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowPackage.Literals.CARTRIDGE__ACTIVATED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCartridgeAccess().getCartridgeCartridgeWFLQualifiedNameParserRuleCall_0_0_1(), semanticObject.getCartridge());
		feeder.accept(grammarAccess.getCartridgeAccess().getActivatedActivatedEnumRuleCall_2_0(), semanticObject.getActivated());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cartridges returns Cartridges
	 *
	 * Constraint:
	 *     (name='Cartridges' cartdriges+=Cartridge*)
	 */
	protected void sequence_Cartridges(ISerializationContext context, Cartridges semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (WFBsp=Cartridges WFProperty=Properties WFResource=Resources)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowPackage.Literals.MODEL__WF_BSP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowPackage.Literals.MODEL__WF_BSP));
			if (transientValues.isValueTransient(semanticObject, WorkflowPackage.Literals.MODEL__WF_PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowPackage.Literals.MODEL__WF_PROPERTY));
			if (transientValues.isValueTransient(semanticObject, WorkflowPackage.Literals.MODEL__WF_RESOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowPackage.Literals.MODEL__WF_RESOURCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getWFBspCartridgesParserRuleCall_0_0(), semanticObject.getWFBsp());
		feeder.accept(grammarAccess.getModelAccess().getWFPropertyPropertiesParserRuleCall_1_0(), semanticObject.getWFProperty());
		feeder.accept(grammarAccess.getModelAccess().getWFResourceResourcesParserRuleCall_2_0(), semanticObject.getWFResource());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Properties returns Properties
	 *
	 * Constraint:
	 *     (name='Properties' properties+=PropertyCartridge*)
	 */
	protected void sequence_Properties(ISerializationContext context, Properties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyCartridge returns PropertyCartridge
	 *
	 * Constraint:
	 *     (cartridge=[Cartridge|QualifiedName] properties+=Property*)
	 */
	protected void sequence_PropertyCartridge(ISerializationContext context, PropertyCartridge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowPackage.Literals.PROPERTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Resource returns Resource
	 *
	 * Constraint:
	 *     (name=QualifiedName properties+=Property)
	 */
	protected void sequence_Resource(ISerializationContext context, Resource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Resources returns Resources
	 *
	 * Constraint:
	 *     (name='Resources' resources+=Resource+)
	 */
	protected void sequence_Resources(ISerializationContext context, Resources semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
